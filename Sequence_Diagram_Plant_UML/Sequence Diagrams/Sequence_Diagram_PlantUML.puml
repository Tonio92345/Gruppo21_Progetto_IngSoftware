@startuml

skinparam actorstyle awesome

actor User as u
participant User_Interface as ui
participant StackComplex as s
participant Complex_Number as cn
participant Variables as v
participant Exceptions_Involving_The_Stack as ste
participant Not_Initialized_Var_Exception as nive
participant Division_By_Zero_Exception as dbze
participant Invalid_Input_Exception as iie

u -> ui : Insert a number \n or an operation
activate ui

loop
ui -> s : buttonPressed()
    activate s

alt "Insert invalid input"

    ui -> iie : throw
    activate iie
    iie -> ui : Show the type of error on the text area
    deactivate iie

else "Insert valid input"

    alt "If the input is a mathematic \n operator or a number"
        s -> cn : Do checkOperation()
        activate cn
        deactivate s

        alt "If there is an error \n involving the stack"
            s -> ste : throw
            activate s
            deactivate s
            activate ste
            ste -> ui : Show the type of error on the text area
            deactivate ste
        else "if a number is divided by 0"
            s -> dbze : throw
            activate s
            activate dbze
            deactivate s
            dbze -> ui : Show the type of error on the text area
            deactivate dbze
        end

        cn -> s : Do addComp() or subComp() etc.
        activate s
        deactivate s
        deactivate cn
        deactivate cn

    else "If the input \n involves variables"
        s -> v : Do checkOperation()
        activate s
        deactivate s
        activate v

        alt "If there is an error \n involving the stack"
            s -> ste : throw
            activate s
            deactivate s
            activate ste
            ste -> ui : Show the type of error on the text area
            deactivate ste
        else "if the user wants to use \n not initialized variable"
            s -> nive : throw
            activate s
            deactivate s
            activate nive
            nive -> ui : Show the type of error on the text area
            deactivate nive
        end
    v -> v : Do saveVar(char let) \n or saveNum(char let) etc.
    deactivate v

    else "If the input involves \n stack manipulation"
        s -> s : checkOperation()
        s -> s : Do clear(), drop(), etc.

        alt "If there is an error \n involving the stack"
            s -> ste : throw
            activate s
            deactivate s
            activate ste
            ste -> ui : Show the type of error on the text area
            deactivate ste
        end

        s -> ui : Update stack
        activate s
        deactivate s
    
    end

ui -> u : Show updated stack
deactivate ui
end
end

@enduml
